// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: services/franchise/pb/franchise.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FranchiseServiceClient is the client API for FranchiseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FranchiseServiceClient interface {
	CreateFranchise(ctx context.Context, in *CreateFranchiseRequest, opts ...grpc.CallOption) (*CreateFranchiseResponse, error)
}

type franchiseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFranchiseServiceClient(cc grpc.ClientConnInterface) FranchiseServiceClient {
	return &franchiseServiceClient{cc}
}

func (c *franchiseServiceClient) CreateFranchise(ctx context.Context, in *CreateFranchiseRequest, opts ...grpc.CallOption) (*CreateFranchiseResponse, error) {
	out := new(CreateFranchiseResponse)
	err := c.cc.Invoke(ctx, "/franchise.FranchiseService/CreateFranchise", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FranchiseServiceServer is the server API for FranchiseService service.
// All implementations must embed UnimplementedFranchiseServiceServer
// for forward compatibility
type FranchiseServiceServer interface {
	CreateFranchise(context.Context, *CreateFranchiseRequest) (*CreateFranchiseResponse, error)
	mustEmbedUnimplementedFranchiseServiceServer()
}

// UnimplementedFranchiseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFranchiseServiceServer struct {
}

func (UnimplementedFranchiseServiceServer) CreateFranchise(context.Context, *CreateFranchiseRequest) (*CreateFranchiseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFranchise not implemented")
}
func (UnimplementedFranchiseServiceServer) mustEmbedUnimplementedFranchiseServiceServer() {}

// UnsafeFranchiseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FranchiseServiceServer will
// result in compilation errors.
type UnsafeFranchiseServiceServer interface {
	mustEmbedUnimplementedFranchiseServiceServer()
}

func RegisterFranchiseServiceServer(s grpc.ServiceRegistrar, srv FranchiseServiceServer) {
	s.RegisterService(&FranchiseService_ServiceDesc, srv)
}

func _FranchiseService_CreateFranchise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFranchiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FranchiseServiceServer).CreateFranchise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/franchise.FranchiseService/CreateFranchise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FranchiseServiceServer).CreateFranchise(ctx, req.(*CreateFranchiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FranchiseService_ServiceDesc is the grpc.ServiceDesc for FranchiseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FranchiseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "franchise.FranchiseService",
	HandlerType: (*FranchiseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFranchise",
			Handler:    _FranchiseService_CreateFranchise_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/franchise/pb/franchise.proto",
}
